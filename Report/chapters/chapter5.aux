\relax 
\providecommand\hyper@newdestlabel[2]{}
\citation{riscVbook}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}The RISC-V processor}{46}{chapter.5}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{Chapter:5}{{5}{46}{The RISC-V processor}{chapter.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Single Cycle RISC-V Units}{46}{section.5.1}\protected@file@percent }
\newlabel{section:riscunits}{{5.1}{46}{Single Cycle RISC-V Units}{section.5.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.1}Program Counter}{46}{subsection.5.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.1}{\ignorespaces Illustration of the clocked \texttt  {program counter} process having the next address as input and current address as output. The dashed square indicates a clocked process.\relax }}{47}{figure.caption.62}\protected@file@percent }
\newlabel{fig:PC}{{5.1}{47}{Illustration of the clocked \texttt {program counter} process having the next address as input and current address as output. The dashed square indicates a clocked process.\relax }{figure.caption.62}{}}
\newlabel{PCSME}{{5.1}{47}{A slice of the PC unit SME code, which contains a variable that holds the input address. On every cycle edge it then holds and outputs the current address}{lstlisting.5.1}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.1}A slice of the PC unit SME code, which contains a variable that holds the input address. On every cycle edge it then holds and outputs the current address.}{47}{lstlisting.5.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.2}Instruction Memory}{47}{subsection.5.1.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.2}{\ignorespaces Illustration of the \texttt  {instruction memory} process, taking the PC output as input and outputting to the 5 buses, \texttt  {Read RS1 and RS2}, \texttt  {Write RS}, \texttt  {Instruction} and \texttt  {CPU}.\relax }}{48}{figure.caption.63}\protected@file@percent }
\newlabel{fig:IM}{{5.2}{48}{Illustration of the \texttt {instruction memory} process, taking the PC output as input and outputting to the 5 buses, \texttt {Read RS1 and RS2}, \texttt {Write RS}, \texttt {Instruction} and \texttt {CPU}.\relax }{figure.caption.63}{}}
\newlabel{IMSME}{{5.2}{48}{A slice of the Instruction Memory unit SME code. It contains a single byte array, which holds all the instructions to be run. First we check whether the given address to be accessed lies within instruction array, if not we shut down the CPU. We then use the address to access the correct array elements and create a temporary variable, which contains the instruction, as shown in lines 9-12. Hereafter we slice out the fields in the instruction and place the values in the correct busses. Lastly we tell the simulator to keep the CPU running using the CPU bus}{lstlisting.5.2}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.2}A slice of the Instruction Memory unit SME code. It contains a single byte array, which holds all the instructions to be run. First we check whether the given address to be accessed lies within instruction array, if not we shut down the CPU. We then use the address to access the correct array elements and create a temporary variable, which contains the instruction, as shown in lines 9-12. Hereafter we slice out the fields in the instruction and place the values in the correct busses. Lastly we tell the simulator to keep the CPU running using the CPU bus.}{48}{lstlisting.5.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.3}Next instruction Unit}{49}{subsection.5.1.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.3}{\ignorespaces Illustration of the \texttt  {next} process, taking the \texttt  {PC output} as input and outputs the next instruction address to the \texttt  {next output} bus.\relax }}{49}{figure.caption.64}\protected@file@percent }
\newlabel{fig:NEXT}{{5.3}{49}{Illustration of the \texttt {next} process, taking the \texttt {PC output} as input and outputs the next instruction address to the \texttt {next output} bus.\relax }{figure.caption.64}{}}
\newlabel{NEXTSME}{{5.3}{49}{A slice of the \texttt {Next} process SME code. Here we declare a temporary varible, which contains the program counter output. We increment the temporary variable by four and place it in the output bus}{lstlisting.5.3}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.3}A slice of the \texttt  {Next} process SME code. Here we declare a temporary varible, which contains the program counter output. We increment the temporary variable by four and place it in the output bus.}{49}{lstlisting.5.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.4}Register File}{49}{subsection.5.1.4}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.4}{\ignorespaces Illustration of the \texttt  {register} process. It gets the information on which register addresses to read from \texttt  {Read RS1, RS2} buses. To write data the register uses the \texttt  {write register} bus to know which register to write to. The \texttt  {write data} bus contains the data to be written and the \texttt  {write control} bus authorize whether the register should write or not.\relax }}{50}{figure.caption.65}\protected@file@percent }
\newlabel{fig:REGISTER}{{5.4}{50}{Illustration of the \texttt {register} process. It gets the information on which register addresses to read from \texttt {Read RS1, RS2} buses. To write data the register uses the \texttt {write register} bus to know which register to write to. The \texttt {write data} bus contains the data to be written and the \texttt {write control} bus authorize whether the register should write or not.\relax }{figure.caption.65}{}}
\newlabel{REGISTER}{{5.4}{50}{A slice of the \texttt {register} process SME code. The register is declared as a signed 64-bit array with 32 elements. In every clock cycle the process checks if the write control signal is asserted. If it is, we check if the address to be written lies within the register range and is above 0, as this register is reserved to be hard-wired zero. Lastly the process reads the two specified registers and if they lie within the register range, they get outputted to the corresponding buses}{lstlisting.5.4}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.4}A slice of the \texttt  {register} process SME code. The register is declared as a signed 64-bit array with 32 elements. In every clock cycle the process checks if the write control signal is asserted. If it is, we check if the address to be written lies within the register range and is above 0, as this register is reserved to be hard-wired zero. Lastly the process reads the two specified registers and if they lie within the register range, they get outputted to the corresponding buses.}{50}{lstlisting.5.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.5}Arithmetic Logic Unit (ALU)}{51}{subsection.5.1.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.5}{\ignorespaces Illustration of the \texttt  {ALU} process. The two input contains the operands of the operation to be executed and the output is the result. The ALU opcode (in red) controls which operations the ALU will perform.\relax }}{51}{figure.caption.66}\protected@file@percent }
\newlabel{fig:ALU}{{5.5}{51}{Illustration of the \texttt {ALU} process. The two input contains the operands of the operation to be executed and the output is the result. The ALU opcode (in red) controls which operations the ALU will perform.\relax }{figure.caption.66}{}}
\newlabel{ALU}{{5.5}{51}{A slice of the \texttt {ALU} process SME code. The ALU consists of a large \texttt {switch} statement, with cases for each operation to be performed, which is controlled by the ALU operation code (\texttt {opcode})}{lstlisting.5.5}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.5}A slice of the \texttt  {ALU} process SME code. The ALU consists of a large \texttt  {switch} statement, with cases for each operation to be performed, which is controlled by the ALU operation code (\texttt  {opcode}).}{51}{lstlisting.5.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.6}Immediate generator}{52}{subsection.5.1.6}\protected@file@percent }
\newlabel{section:immediategenerator}{{5.1.6}{52}{Immediate generator}{subsection.5.1.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.6}{\ignorespaces Illustration of the \texttt  {immediate generation} process, taking an instruction as input. It then extracts the immediate field, which it outputs. \relax }}{53}{figure.caption.67}\protected@file@percent }
\newlabel{fig:IMMGEN}{{5.6}{53}{Illustration of the \texttt {immediate generation} process, taking an instruction as input. It then extracts the immediate field, which it outputs. \relax }{figure.caption.67}{}}
\newlabel{IMMGEN}{{5.6}{53}{A slice of the \texttt {IMMGEN} process SME code. We first extract the opcode and funct3 fields from the instruction and put them in a variable. We then use a \texttt {switch} statement and the opcode to determine what type of instruction we are dealing with. Since some instructions of same type like \texttt {slli} only use the lower 6 bits in the immediate field (shamt field), we need another switch statement to tell these apart using the funct3 field. Lastly we construct the immediate and output it . Note that in line 18 we make use of a little hack to retain the sign bit of a 12 bit number since it is not supported in \texttt {C\#}}{lstlisting.5.6}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.6}A slice of the \texttt  {IMMGEN} process SME code. We first extract the opcode and funct3 fields from the instruction and put them in a variable. We then use a \texttt  {switch} statement and the opcode to determine what type of instruction we are dealing with. Since some instructions of same type like \texttt  {slli} only use the lower 6 bits in the immediate field (shamt field), we need another switch statement to tell these apart using the funct3 field. Lastly we construct the immediate and output it . Note that in line 18 we make use of a little hack to retain the sign bit of a 12 bit number since it is not supported in \texttt  {C\#}}{53}{lstlisting.5.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.7}Data Memory}{54}{subsection.5.1.7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.7}{\ignorespaces Illustration of the \texttt  {Data Memory} process. The target address is calculated in the ALU and data to be written outputted from register 2, which the unit takes as input. Controls signals are marked in red and consists of \texttt  {Memory Read}, \texttt  {Memory Write} and \texttt  {Size and Sign}. It then outputs the read data or 0 if both \texttt  {Memory Read} and \texttt  {Memory Write} are deasserted.\relax }}{54}{figure.caption.68}\protected@file@percent }
\newlabel{fig:DM}{{5.7}{54}{Illustration of the \texttt {Data Memory} process. The target address is calculated in the ALU and data to be written outputted from register 2, which the unit takes as input. Controls signals are marked in red and consists of \texttt {Memory Read}, \texttt {Memory Write} and \texttt {Size and Sign}. It then outputs the read data or 0 if both \texttt {Memory Read} and \texttt {Memory Write} are deasserted.\relax }{figure.caption.68}{}}
\newlabel{DM}{{5.7}{55}{A slice of the \texttt {Data Memory} process SME code. Similar to the instruction memory, the data memory consists of a byte array, which we made 2000 elements long in this case. As there can only be read or written to the data memory once per clock cycle, we simply construct an \texttt {if/else} statement, which uses control signals to determine the procedure to be done. Both the read and write procedures need to know the size and sign of the data to be loaded or written. Therefore a \texttt {switch} statement has been added to both outcomes, which uses \texttt {SizeAndSign} control signal to choose between the cases. When reading the data from memory we need to remember that it is little-endian addressed so before we output the value the bits need to be shuffled around in the correct order, so the correct value is added to the register, as that is big-endian. When writing the data the opposite need to happen, so a big-endian value need to be converted to a little-endian one. If both read and write control signals are deasserted I choose to output 0}{lstlisting.5.7}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.7}A slice of the \texttt  {Data Memory} process SME code. Similar to the instruction memory, the data memory consists of a byte array, which we made 2000 elements long in this case. As there can only be read or written to the data memory once per clock cycle, we simply construct an \texttt  {if/else} statement, which uses control signals to determine the procedure to be done. Both the read and write procedures need to know the size and sign of the data to be loaded or written. Therefore a \texttt  {switch} statement has been added to both outcomes, which uses \texttt  {SizeAndSign} control signal to choose between the cases. When reading the data from memory we need to remember that it is little-endian addressed so before we output the value the bits need to be shuffled around in the correct order, so the correct value is added to the register, as that is big-endian. When writing the data the opposite need to happen, so a big-endian value need to be converted to a little-endian one. If both read and write control signals are deasserted I choose to output 0.}{55}{lstlisting.5.7}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.8}GoTo Unit}{56}{subsection.5.1.8}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.8}{\ignorespaces Illustration of the \texttt  {GoTo} process. As input it uses the two output lines from the register. It has one control line in red and one output line in green.\relax }}{56}{figure.caption.69}\protected@file@percent }
\newlabel{fig:GOTO}{{5.8}{56}{Illustration of the \texttt {GoTo} process. As input it uses the two output lines from the register. It has one control line in red and one output line in green.\relax }{figure.caption.69}{}}
\newlabel{GOTO}{{5.8}{56}{A slice of the \texttt {GoTo} process SME code. The unit consists of a \texttt {switch} statement, where each case does the comparison relevant to the branching instruction. The conditional operator \texttt {?} is used for the comparison (the syntax goes as follows \texttt {condition ? If true return this : If false return this})}{lstlisting.5.8}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.8}A slice of the \texttt  {GoTo} process SME code. The unit consists of a \texttt  {switch} statement, where each case does the comparison relevant to the branching instruction. The conditional operator \texttt  {?} is used for the comparison (the syntax goes as follows \texttt  {condition ? If true return this : If false return this}).}{56}{lstlisting.5.8}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.9}Multiplexer}{57}{subsection.5.1.9}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.9}{\ignorespaces Illustration of the \texttt  {Multiplexer} process. An arbitrary amount of input can be given, where the output is selected by the red control line. \relax }}{57}{figure.caption.70}\protected@file@percent }
\newlabel{fig:MUX}{{5.9}{57}{Illustration of the \texttt {Multiplexer} process. An arbitrary amount of input can be given, where the output is selected by the red control line. \relax }{figure.caption.70}{}}
\newlabel{MUX}{{5.9}{57}{An example of a \texttt {Multiplexer} process SME code. The whole multiplexer simply consists of a \texttt {switch} statement that selects an input to output dependent on \texttt {SelectBus}}{lstlisting.5.9}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.9}An example of a \texttt  {Multiplexer} process SME code. The whole multiplexer simply consists of a \texttt  {switch} statement that selects an input to output dependent on \texttt  {SelectBus}.}{57}{lstlisting.5.9}\protected@file@percent }
\citation{riscVbook}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.10}Write Back Unit}{58}{subsection.5.1.10}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.10}{\ignorespaces Illustration of the \texttt  {Write Back} process. It has 3 input \texttt  {Data}, \texttt  {Write Register} and \texttt  {Write control}. These input gets outputted unchanged to their respective output buses. The dashed square indicates a clocked process.\relax }}{58}{figure.caption.71}\protected@file@percent }
\newlabel{fig:WB}{{5.10}{58}{Illustration of the \texttt {Write Back} process. It has 3 input \texttt {Data}, \texttt {Write Register} and \texttt {Write control}. These input gets outputted unchanged to their respective output buses. The dashed square indicates a clocked process.\relax }{figure.caption.71}{}}
\newlabel{WB}{{5.10}{58}{A slice of the \texttt {Write Back} process SME code. It contains 3 variables, which will hold the incomming values, which gets outputted unchanged in the same clock cycle}{lstlisting.5.10}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.10}A slice of the \texttt  {Write Back} process SME code. It contains 3 variables, which will hold the incomming values, which gets outputted unchanged in the same clock cycle.}{58}{lstlisting.5.10}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.11}AND gate unit}{59}{subsection.5.1.11}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.11}{\ignorespaces Illustration of the \texttt  {AND gate} process. It has two input one from the \texttt  {GoTo} unit and one from the \texttt  {control unit} named \texttt  {PCSel}. The output is then the result of the logical AND operation between the two input.\relax }}{59}{figure.caption.72}\protected@file@percent }
\newlabel{fig:AND}{{5.11}{59}{Illustration of the \texttt {AND gate} process. It has two input one from the \texttt {GoTo} unit and one from the \texttt {control unit} named \texttt {PCSel}. The output is then the result of the logical AND operation between the two input.\relax }{figure.caption.72}{}}
\newlabel{AND}{{5.11}{59}{A slice of the \texttt {AND gate} process SME code. It simply calculates the logical AND of two input and outputs the result}{lstlisting.5.11}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.11}A slice of the \texttt  {AND gate} process SME code. It simply calculates the logical AND of two input and outputs the result.}{59}{lstlisting.5.11}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.12}Control}{59}{subsection.5.1.12}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.12}{\ignorespaces Illustration of the \texttt  {Control} process. It takes a 32-bit instruction as input and sets the control lines for the respective instruction.\relax }}{60}{figure.caption.73}\protected@file@percent }
\newlabel{fig:CONTROL}{{5.12}{60}{Illustration of the \texttt {Control} process. It takes a 32-bit instruction as input and sets the control lines for the respective instruction.\relax }{figure.caption.73}{}}
\newlabel{CONTROL}{{5.12}{61}{A slice of the \texttt {Control} process SME code. First 3 variables are declared for the extracted \texttt {opcode}, \texttt {funct3} and \texttt {func7} fields. They are then used in the following \texttt {switch} statements to correctly identify the given instruction. Finally the control lines are set with the values for the respective instruction}{lstlisting.5.12}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.12}A slice of the \texttt  {Control} process SME code. First 3 variables are declared for the extracted \texttt  {opcode}, \texttt  {funct3} and \texttt  {func7} fields. They are then used in the following \texttt  {switch} statements to correctly identify the given instruction. Finally the control lines are set with the values for the respective instruction.}{61}{lstlisting.5.12}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5.2}Single Cycle RISC-V datapaths}{62}{section.5.2}\protected@file@percent }
\newlabel{section:Datapaths}{{5.2}{62}{Single Cycle RISC-V datapaths}{section.5.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.13}{\ignorespaces An illustration of the wired RISC-V CPU.\relax }}{62}{figure.caption.74}\protected@file@percent }
\newlabel{fig:RISCV}{{5.13}{62}{An illustration of the wired RISC-V CPU.\relax }{figure.caption.74}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.1}Supporting R-Format instructions}{63}{subsection.5.2.1}\protected@file@percent }
\newlabel{section:Rformat}{{5.2.1}{63}{Supporting R-Format instructions}{subsection.5.2.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {5.1}{\ignorespaces This table shows control line values for the R-format datapath. Only the \texttt  {ALUop} line is different between the R-format instructions and the values range from 0 to 14.\relax }}{63}{table.caption.75}\protected@file@percent }
\newlabel{table:RFORMAT}{{5.1}{63}{This table shows control line values for the R-format datapath. Only the \texttt {ALUop} line is different between the R-format instructions and the values range from 0 to 14.\relax }{table.caption.75}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.2}Supporting I-Format instructions}{63}{subsection.5.2.2}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.2}{\ignorespaces This table shows control line values for the I-format datapath. Only the \texttt  {ALUop} line is different between the I-format instructions and the values range from 0 to 14.\relax }}{64}{table.caption.76}\protected@file@percent }
\newlabel{table:IFORMAT}{{5.2}{64}{This table shows control line values for the I-format datapath. Only the \texttt {ALUop} line is different between the I-format instructions and the values range from 0 to 14.\relax }{table.caption.76}{}}
\@writefile{toc}{\contentsline {subsubsection}{Load instructions}{64}{section*.77}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.3}{\ignorespaces This table shows control line values for the special case I-format \texttt  {load} instruction datapath. \relax }}{64}{table.caption.78}\protected@file@percent }
\newlabel{table:LOADFORMAT}{{5.3}{64}{This table shows control line values for the special case I-format \texttt {load} instruction datapath. \relax }{table.caption.78}{}}
\@writefile{toc}{\contentsline {subsubsection}{Jump and link register}{64}{section*.79}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.4}{\ignorespaces This table shows control line values for the special case I-format \texttt  {jalr} instruction datapath. \relax }}{65}{table.caption.80}\protected@file@percent }
\newlabel{table:JALRFORMAT}{{5.4}{65}{This table shows control line values for the special case I-format \texttt {jalr} instruction datapath. \relax }{table.caption.80}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.3}Supporting S-Format instructions}{65}{subsection.5.2.3}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.5}{\ignorespaces This table shows control line values for the S-format datapath.\relax }}{65}{table.caption.81}\protected@file@percent }
\newlabel{table:SFORMAT}{{5.5}{65}{This table shows control line values for the S-format datapath.\relax }{table.caption.81}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.4}Supporting B-Format instructions}{65}{subsection.5.2.4}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.6}{\ignorespaces This table shows control line values for the B-format datapath.\relax }}{66}{table.caption.82}\protected@file@percent }
\newlabel{table:BFORMAT}{{5.6}{66}{This table shows control line values for the B-format datapath.\relax }{table.caption.82}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.5}Supporting U-Format instructions}{66}{subsection.5.2.5}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.7}{\ignorespaces This table shows control line values for the U-format datapath. \texttt  {ALUSrc1} is asserted for \texttt  {AUIPC} and deasserted for \texttt  {LUI}. \texttt  {ALUop} is set to 0 for \texttt  {AUIPC} and set to 15 for \texttt  {LUI}.\relax }}{66}{table.caption.83}\protected@file@percent }
\newlabel{table:UFORMAT}{{5.7}{66}{This table shows control line values for the U-format datapath. \texttt {ALUSrc1} is asserted for \texttt {AUIPC} and deasserted for \texttt {LUI}. \texttt {ALUop} is set to 0 for \texttt {AUIPC} and set to 15 for \texttt {LUI}.\relax }{table.caption.83}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.6}Supporting J-Format instructions}{67}{subsection.5.2.6}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.8}{\ignorespaces This table shows control line values for the J-format datapath.\relax }}{67}{table.caption.84}\protected@file@percent }
\newlabel{table:JFORMAT}{{5.8}{67}{This table shows control line values for the J-format datapath.\relax }{table.caption.84}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.7}Special Zero instruction}{67}{subsection.5.2.7}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5.9}{\ignorespaces This table shows control line values for the Zero instruction datapath.\relax }}{67}{table.caption.85}\protected@file@percent }
\newlabel{table:ZEROFORMAT}{{5.9}{67}{This table shows control line values for the Zero instruction datapath.\relax }{table.caption.85}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.3}Debugging the instructions}{67}{section.5.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.1}Writing simple C code to run on RISC-V}{69}{subsection.5.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.2}VHDL and Synthesis}{70}{subsection.5.3.2}\protected@file@percent }
\citation{8760205}
\@setckpt{chapters/chapter5}{
\setcounter{page}{72}
\setcounter{equation}{0}
\setcounter{enumi}{4}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{6}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{5}
\setcounter{section}{3}
\setcounter{subsection}{2}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{13}
\setcounter{table}{9}
\setcounter{parentequation}{0}
\setcounter{caption@flags}{0}
\setcounter{continuedfloat}{0}
\setcounter{subfigure}{0}
\setcounter{subtable}{0}
\setcounter{currfiledepth}{0}
\setcounter{NAT@ctr}{0}
\setcounter{Item}{4}
\setcounter{Hfootnote}{18}
\setcounter{bookmark@seq@number}{62}
\setcounter{pp@next@reset}{0}
\setcounter{lstnumber}{22}
\setcounter{@todonotes@numberoftodonotes}{0}
\setcounter{section@level}{2}
\setcounter{lstlisting}{12}
}
